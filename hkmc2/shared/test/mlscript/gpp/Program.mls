:global
:p

define Program ::= Expr ~> $1
0
1
x => x
(x => x + 1)(2)
//│ |define| |Program| |::=| |Expr| |~>| |$1|↵|0|↵|1|↵|x| |=>| |x|↵|(|x| |=>| |x| |+| |1|)|(|2|)|
//│ AST: List(Const(IntLit(0)), Const(IntLit(1)), Lam(Var(x),Var(x)), Lam(Var(x),App(App(App(Var(+),Var(x)),Const(IntLit(1))),Const(IntLit(2)))))
//│ Pretty-print: 0, 1, x => Var(x).print, x => App(App(App(Var(+),Var(x)),Const(IntLit(1))),Const(IntLit(2))).print
//│ Keywords: ::=, =>, define, keyword, ~>
//│ Rules: default ::= Expr End 

define Program ::= Expr Expr ~> $1 + $2
0 1
2 3
4 5
//│ |define| |Program| |::=| |Expr| |Expr| |~>| |$1| |+| |$2|↵|0| |1|↵|2| |3|↵|4| |5|
//│ AST: List(App(App(Var(+),Const(IntLit(0))),Const(IntLit(1))), App(App(Var(+),Const(IntLit(2))),Const(IntLit(3))), App(App(Var(+),Const(IntLit(4))),Const(IntLit(5))))
//│ Pretty-print: 0 + 1, 2 + 3, 4 + 5
//│ Keywords: ::=, =>, define, keyword, ~>
//│ Rules: default ::= Expr End 

:pe
define Program ::= Expr ~> $1
f(
  1,
  2,
  3,
)
//│ |define| |Program| |::=| |Expr| |~>| |$1|↵|f|(| |1|,|↵|2|,|↵|3|,|↵|)|
//│ ╔══[PARSE ERROR] Expected an expression; found newline instead
//│ ║  l.28: 	  1,
//│ ║        	    ^
//│ ║  l.29: 	  2,
//│ ╙──      	^^
//│ ╔══[PARSE ERROR] Expected an expression; found closing parenthesis instead
//│ ║  l.31: 	)
//│ ╙──      	^
//│ ╔══[PARSE ERROR] Expected end of input; found closing parenthesis instead
//│ ║  l.31: 	)
//│ ╙──      	^
//│ AST: List(App(Var(f),App(App(Var(,),Const(IntLit(1))),Empty)), Const(IntLit(2)), Const(IntLit(3)), Empty)
//│ Pretty-print: (f)(((,)(1))(?)), 2, 3, ?
//│ Keywords: ::=, =>, define, keyword, ~>
//│ Rules: default ::= Expr End 
