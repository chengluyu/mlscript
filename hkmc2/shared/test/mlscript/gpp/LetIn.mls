:global
:p

keyword let
keyword =
keyword in
define LetIn ::= let Expr = Expr in Expr ~> ($1 => $3)($2)
let x = 1 in x
//│ |keyword| |let|↵|keyword| |=|↵|keyword| |in|↵|define| |LetIn| |::=| |let| |Expr| |=| |Expr| |in| |Expr| |~>| |(|$1| |=>| |$3|)|(|$2|)|↵|let| |x| |=| |1| |in| |x|
//│ AST: List(App(Lam(Var(x),Var(x)),Const(IntLit(1))))
//│ Pretty-print: (x => Var(x).print)(1)
//│ Keywords: ::=, =>, define, keyword, ~>
//│ Rules: default ::= Expr End 
