:global
:p
:keepContext

keyword (stronger than *) double
define Double ::= double Expr ~> $1 * 2
double 1
double 2 + 3
//│ |keyword| |(|stronger| |than| |*|)| |double|↵|define| |Double| |::=| |double| |Expr| |~>| |$1| |*| |2|↵|double| |1|↵|double| |2| |+| |3|
//│ Pretty-print:
//│   1 * 2
//│   (2 + 3) * 2
//│ AST:
//│   App(App(Var(*),Const(IntLit(1))),Const(IntLit(2)))
//│   App(App(Var(*),App(App(Var(+),Const(IntLit(2))),Const(IntLit(3)))),Const(IntLit(2)))
//│ Keywords: `double` 14
//│ Rules: Double ::= double ‹Expr›

:pe
define DoubleProduct ::= Double Double ~> $1 * $2
// Because `Double` and `DoubleProduct` shares the same prefix.
double 1 double 2
//│ |define| |DoubleProduct| |::=| |Double| |Double| |~>| |$1| |*| |$2|↵|/* Because `Double` and `DoubleProduct` shares the same prefix.*/|↵|double| |1| |double| |2|
//│ ╔══[PARSE ERROR] Expected keywords, `Ident`, `Expr`, or other non-terminal symbol in rule definitions; found identifier instead
//│ ║  l.20: 	define DoubleProduct ::= Double Double ~> $1 * $2
//│ ╙──      	                         ^^^^^^
//│ ╔══[PARSE ERROR] Expected an infix operator ; found `~>` 2 2 instead
//│ ║  l.20: 	define DoubleProduct ::= Double Double ~> $1 * $2
//│ ╙──      	                                       ^^
//│ ╔══[PARSE ERROR] Expected end of input; found identifier instead
//│ ║  l.20: 	define DoubleProduct ::= Double Double ~> $1 * $2
//│ ╙──      	                                          ^^
//│ Rules: DoubleProduct ::= 

:pe
keyword product
define DoubleProduct ::= product Double Double ~> $1 * $2
product double 1 double 2
//│ |keyword| |product|↵|define| |DoubleProduct| |::=| |product| |Double| |Double| |~>| |$1| |*| |$2|↵|product| |double| |1| |double| |2|
//│ ╔══[PARSE ERROR] Expected keywords, `Ident`, `Expr`, or other non-terminal symbol in rule definitions; found identifier instead
//│ ║  l.37: 	define DoubleProduct ::= product Double Double ~> $1 * $2
//│ ╙──      	                                 ^^^^^^
//│ ╔══[PARSE ERROR] Expected an infix operator ; found `~>` 2 2 instead
//│ ║  l.37: 	define DoubleProduct ::= product Double Double ~> $1 * $2
//│ ╙──      	                                               ^^
//│ ╔══[PARSE ERROR] Expected end of input; found identifier instead
//│ ║  l.37: 	define DoubleProduct ::= product Double Double ~> $1 * $2
//│ ╙──      	                                                  ^^
//│ Keywords: `product`
