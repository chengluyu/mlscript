:global
:p
:keepContext

keyword double
define Double ::= double Expr ~> $1 * 2
double 1
double 2 + 3
//│ |keyword| |double|↵|define| |Double| |::=| |double| |Expr| |~>| |$1| |*| |2|↵|double| |1|↵|double| |2| |+| |3|
//│ AST: List(App(App(Var(*),Const(IntLit(1))),Const(IntLit(2))), App(App(Var(*),App(App(Var(+),Const(IntLit(2))),Const(IntLit(3)))),Const(IntLit(2))))
//│ Keywords: ::=, =>, define, double, keyword, ~>
//│ Rules: Double ::= `double` Expr End 

:pe
define DoubleProduct ::= Double Double ~> $1 * $2
// Because `Double` and `DoubleProduct` shares the same prefix.
double 1 double 2
//│ |define| |DoubleProduct| |::=| |Double| |Double| |~>| |$1| |*| |$2|↵|/* Because `Double` and `DoubleProduct` shares the same prefix.*/|↵|double| |1| |double| |2|
//│ ╔══[PARSE ERROR] Expected 'double' keyword or reference to Double after all prefix rules; found newline instead
//│ ║  l.16: 	// Because `Double` and `DoubleProduct` shares the same prefix.
//│ ║        	                                                               ^
//│ ║  l.17: 	double 1 double 2
//│ ╙──      	
//│ ╔══[PARSE ERROR] Expected end of input; found 'double' keyword instead
//│ ║  l.17: 	double 1 double 2
//│ ╙──      	^^^^^^
//│ AST: List(Empty)
//│ Keywords: ::=, =>, define, double, keyword, ~>
//│ Rules: Double ::= `double` Expr End ,DoubleProduct ::= Double Double End 

:pe
keyword product
define DoubleProduct ::= product Double Double ~> $1 * $2
product double 1 double 2
//│ |keyword| |product|↵|define| |DoubleProduct| |::=| |product| |Double| |Double| |~>| |$1| |*| |$2|↵|product| |double| |1| |double| |2|
//│ ╔══[PARSE ERROR] Expected reference to Double after after product; found 'double' keyword instead
//│ ║  l.34: 	product double 1 double 2
//│ ╙──      	        ^^^^^^
//│ ╔══[PARSE ERROR] Expected end of input; found literal instead
//│ ║  l.34: 	product double 1 double 2
//│ ╙──      	               ^
//│ AST: List(Empty)
//│ Keywords: ::=, =>, define, double, keyword, product, ~>
//│ Rules: Double ::= `double` Expr End ,DoubleProduct ::= `product` Double Double End 
