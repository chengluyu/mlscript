:global
:p
:keepContext

// syntax (1) match (1) _ with (2) _ ~> match($1, $2)
// syntax (2) | (2) _ ~> 
// syntax (2) _ -> (1) _ | (2) _
// syntax (2) _ -> (1) _

// Difficulties:
// 1. The left precedence of | should be lower than the right precedence of ->.
//    Otherwise, A -> n | y will be parsed as A -> (n | y).
// 2. Rule #3 and #4 makes trailing symbols optional. While our parser does not
//    support this kind of use case yet. We either extend the currently ongoing
//    rule to a list of rules, or we merge rules dynamically.

keyword (1) match (1)
keyword with (2)
keyword (0) | (2)
keyword (max) -> (1)
//│ |keyword| |(|1|)| |match| |(|1|)|↵|keyword| |with| |(|2|)|↵|keyword| |(|0|)| ||| |(|2|)|↵|keyword| |(|max|)| |->| |(|1|)|
//│ Keywords: `->` 2147483647 1, `match` 1 1, `with` 2, `|` 0 2

// TODO: parse multiple arguments
syntax match _ with _ ~> `match`($1, $2)
//│ |syntax| |match| |_| |with| |_| |~>| |match|(|$1|,| |$2|)|
//│ Rules: unnamed#1 ::= match ‹Expr› with ‹Expr›

match x with y
//│ |match| |x| |with| |y|
//│ ╔══[PARSE ERROR] Expected an expression; found `with` 2 instead
//│ ║  l.29: 	match x with y
//│ ╙──      	        ^^^^
//│ ╔══[PARSE ERROR] Expected expression after after with; found 'with' keyword instead
//│ ║  l.29: 	match x with y
//│ ╙──      	        ^^^^
//│ Pretty-print: ?
//│ AST: Empty

syntax | _ ~> else($1)
//│ |syntax| ||| |_| |~>| |else|(|$1|)|
//│ Rules: unnamed#2 ::= | ‹Expr›

| 0 + 1
| 1 * 2 + f(4 + 5) * 6
//│ ||| |0| |+| |1|↵||| |1| |*| |2| |+| |f|(|4| |+| |5|)| |*| |6|
//│ ╔══[PARSE ERROR] Expected expression after after |; found literal instead
//│ ║  l.44: 	| 0 + 1
//│ ╙──      	  ^
//│ ╔══[PARSE ERROR] Expected end of input; found '|' keyword instead
//│ ║  l.45: 	| 1 * 2 + f(4 + 5) * 6
//│ ╙──      	^
//│ Pretty-print: ?
//│ AST: Empty

match x with | y
//│ |match| |x| |with| ||| |y|
//│ ╔══[PARSE ERROR] Expected an expression; found `with` 2 instead
//│ ║  l.56: 	match x with | y
//│ ╙──      	        ^^^^
//│ ╔══[PARSE ERROR] Expected end of input; found '|' keyword instead
//│ ║  l.56: 	match x with | y
//│ ╙──      	             ^
//│ Pretty-print: ?
//│ AST: Empty

syntax _ -> _ | _ ~> case($1, $2, $3)
//│ |syntax| |_| |->| |_| ||| |_| |~>| |case|(|$1|,| |$2|,| |$3|)|
//│ Rules: unnamed#3 ::= ‹Expr› -> ‹Expr› | ‹Expr›

A -> 0 | otherwise
//│ |A| |->| |0| ||| |otherwise|
//│ ╔══[PARSE ERROR] Expected an expression; found `|` 0 2 instead
//│ ║  l.71: 	A -> 0 | otherwise
//│ ╙──      	       ^
//│ ╔══[PARSE ERROR] Expected expression after after |; found '|' keyword instead
//│ ║  l.71: 	A -> 0 | otherwise
//│ ╙──      	       ^
//│ Pretty-print: ?
//│ AST: Empty

A(n) -> n | y
//│ |A|(|n|)| |->| |n| ||| |y|
//│ ╔══[PARSE ERROR] Expected an expression; found `|` 0 2 instead
//│ ║  l.82: 	A(n) -> n | y
//│ ╙──      	          ^
//│ ╔══[PARSE ERROR] Expected expression after after |; found '|' keyword instead
//│ ║  l.82: 	A(n) -> n | y
//│ ╙──      	          ^
//│ Pretty-print: ?
//│ AST: Empty

:pe
A(n) -> n | _ -> y
//│ |A|(|n|)| |->| |n| ||| |_| |->| |y|
//│ ╔══[PARSE ERROR] Expected an expression; found `|` 0 2 instead
//│ ║  l.94: 	A(n) -> n | _ -> y
//│ ╙──      	          ^
//│ ╔══[PARSE ERROR] Expected expression after after |; found '|' keyword instead
//│ ║  l.94: 	A(n) -> n | _ -> y
//│ ╙──      	          ^
//│ ╔══[PARSE ERROR] Expected end of input; found '->' keyword instead
//│ ║  l.94: 	A(n) -> n | _ -> y
//│ ╙──      	              ^^
//│ Pretty-print: ?
//│ AST: Empty


A(n) -> n | B(x, y) -> x + y | qq
//│ |A|(|n|)| |->| |n| ||| |B|(|x|,| |y|)| |->| |x| |+| |y| ||| |qq|
//│ ╔══[PARSE ERROR] Expected an expression; found `|` 0 2 instead
//│ ║  l.109: 	A(n) -> n | B(x, y) -> x + y | qq
//│ ╙──       	          ^
//│ ╔══[PARSE ERROR] Expected expression after after |; found '|' keyword instead
//│ ║  l.109: 	A(n) -> n | B(x, y) -> x + y | qq
//│ ╙──       	          ^
//│ ╔══[PARSE ERROR] Expected end of input; found opening parenthesis instead
//│ ║  l.109: 	A(n) -> n | B(x, y) -> x + y | qq
//│ ╙──       	             ^
//│ Pretty-print: ?
//│ AST: Empty

syntax _ -> _ ~> case($1, $2, nil)
//│ |syntax| |_| |->| |_| |~>| |case|(|$1|,| |$2|,| |nil|)|
//│ Rules: unnamed#4 ::= ‹Expr› -> ‹Expr›

A -> 0
//│ |A| |->| |0|
//│ ╔══[PARSE ERROR] Expected expression after after ->; found literal instead
//│ ║  l.127: 	A -> 0
//│ ╙──       	     ^
//│ Pretty-print: ?
//│ AST: Empty

:dp
A -> 0 | otherwise
//│ |A| |->| |0| ||| |otherwise|
//│ @ block(block)    [at syntax/Parser.scala:249]
//│ │ ? block		inspects |A| |->| |0|...    [at syntax/Parser.scala:234]
//│ │ @ expr(0)    [at syntax/Parser.scala:435]
//│ │ │ ? expr		inspects |A| |->| |0|...    [at syntax/Parser.scala:410]
//│ │ │ ! expr		consumes |A|    [at syntax/Parser.scala:420]
//│ │ │ @ exprCont(0,`Var(A)`,true)    [at syntax/Parser.scala:474]
//│ │ │ │ ? exprCont		inspects | |->| |0| |...    [at syntax/Parser.scala:440]
//│ │ │ │ ! exprCont		consumes | |    [at syntax/Parser.scala:465]
//│ │ │ │ @ exprCont(0,`Var(A)`,true)    [at syntax/Parser.scala:474]
//│ │ │ │ │ ? exprCont		inspects |->| |0| |||...    [at syntax/Parser.scala:440]
//│ │ │ │ │ looking for infix rules for `->` 2147483647 1
//│ │ │ │ │ ! exprCont		consumes |->|    [at syntax/Parser.scala:451]
//│ │ │ │ │ @ parseRule(1,after -> ::= ‹Expr›)    [at syntax/Parser.scala:407]
//│ │ │ │ │ │ ? parseRule		inspects | |0| ||| |...    [at syntax/Parser.scala:387]
//│ │ │ │ │ │ ! parseRule		consumes | |    [at syntax/Parser.scala:387]
//│ │ │ │ │ │ @ tryExprThenEmpty(1, literal)    [at syntax/Parser.scala:378]
//│ │ │ │ │ │ │ ? tryExprThenEmpty		inspects |0| ||| |otherwise|    [at syntax/Parser.scala:354]
//│ │ │ │ │ │ │ @ expr(1)    [at syntax/Parser.scala:435]
//│ │ │ │ │ │ │ │ ? expr		inspects |0| ||| |otherwise|    [at syntax/Parser.scala:410]
//│ │ │ │ │ │ │ │ ! expr		consumes |0|    [at syntax/Parser.scala:423]
//│ │ │ │ │ │ │ │ @ exprCont(1,`Const(IntLit(0))`,true)    [at syntax/Parser.scala:474]
//│ │ │ │ │ │ │ │ │ ? exprCont		inspects | ||| |otherwise|    [at syntax/Parser.scala:440]
//│ │ │ │ │ │ │ │ │ ! exprCont		consumes | |    [at syntax/Parser.scala:465]
//│ │ │ │ │ │ │ │ │ @ exprCont(1,`Const(IntLit(0))`,true)    [at syntax/Parser.scala:474]
//│ │ │ │ │ │ │ │ │ │ ? exprCont		inspects ||| |otherwise|    [at syntax/Parser.scala:440]
//│ │ │ │ │ │ │ │ │ = Const(IntLit(0))
//│ │ │ │ │ │ │ │ = Const(IntLit(0))
//│ │ │ │ │ │ │ = Const(IntLit(0))
//│ │ │ │ │ │ │ ? tryExprThenEmpty		inspects ||| |otherwise|    [at syntax/Parser.scala:362]
//│ │ │ │ │ │ = None
//│ │ │ │ │ = None
//│ │ │ │ = Empty
//│ │ │ = Empty
//│ │ = Empty
//│ │ ? block		inspects ||| |otherwise|    [at syntax/Parser.scala:249]
//│ = WithContext(List(Empty),Context(TreeMap(-> -> `->` 2147483647 1, ::= -> `::=` 2 2, => -> `=>` 3 2, define -> `define`, keyword -> `keyword`, match -> `match` 1 1, syntax -> `syntax`, with -> `with` 2, | -> `|` 0 2, ~> -> `~>` 2 2),TreeMap(Left(0) -> default ::= ‹Expr›, Left(1) -> unnamed#1 ::= match ‹Expr› with ‹Expr›, Left(2) -> unnamed#2 ::= | ‹Expr›, Left(3) -> unnamed#3 ::= ‹Expr› -> ‹Expr› | ‹Expr›, Left(4) -> unnamed#4 ::= ‹Expr› -> ‹Expr›)))
//│ ? parseAll		inspects ||| |otherwise|    [at syntax/Parser.scala:192]
//│ Error    [at syntax/Parser.scala:195]
//│ ╔══[PARSE ERROR] Expected end of input; found '|' keyword instead
//│ ║  l.136: 	A -> 0 | otherwise
//│ ╙──       	       ^
//│ Pretty-print: ?
//│ AST: Empty
