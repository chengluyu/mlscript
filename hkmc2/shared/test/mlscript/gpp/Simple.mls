:global
:p

keyword x
keyword y
keyword z
//│ |keyword| |x|↵|keyword| |y|↵|keyword| |z|
//│ AST: List()
//│ Pretty-print: 
//│ Keywords: ::=, =>, define, keyword, ~>
//│ Rules: default ::= Expr End 

:pe
keyword x
x
//│ |keyword| |x|↵|x|
//│ AST: List(Var(x))
//│ Pretty-print: x
//│ Keywords: ::=, =>, define, keyword, ~>
//│ Rules: default ::= Expr End 

keyword inc
define Inc ::= inc Expr ~> ($1 + 1)
inc x
inc 1 + 2
//│ |keyword| |inc|↵|define| |Inc| |::=| |inc| |Expr| |~>| |(|$1| |+| |1|)|↵|inc| |x|↵|inc| |1| |+| |2|
//│ AST: List(App(App(Var(+),Var(x)),Const(IntLit(1))), App(App(Var(+),App(App(Var(+),Const(IntLit(1))),Const(IntLit(2)))),Const(IntLit(1))))
//│ Pretty-print: x + 1, 1 + 2 + 1
//│ Keywords: ::=, =>, define, keyword, ~>
//│ Rules: default ::= Expr End 

// Warn about wrong indices
:w
keyword dec
define Dec ::= dec Expr ~> ($2 - 1)
dec x
//│ |keyword| |dec|↵|define| |Dec| |::=| |dec| |Expr| |~>| |(|$2| |-| |1|)|↵|dec| |x|
//│ ╔══[WARNING] Invalid meta-variable reference $2
//│ ║  l.35: 	define Dec ::= dec Expr ~> ($2 - 1)
//│ ╙──      	                            ^^
//│ AST: List(App(App(Var(-),Var($2)),Const(IntLit(1))))
//│ Pretty-print: $2 - 1
//│ Keywords: ::=, =>, define, keyword, ~>
//│ Rules: default ::= Expr End 

keyword let
keyword as
keyword in
define LetIn ::= let Expr as Expr in Expr ~> ($1 => $3)($2)
let x as 1 in x
//│ |keyword| |let|↵|keyword| |as|↵|keyword| |in|↵|define| |LetIn| |::=| |let| |Expr| |as| |Expr| |in| |Expr| |~>| |(|$1| |=>| |$3|)|(|$2|)|↵|let| |x| |as| |1| |in| |x|
//│ AST: List(App(Lam(Var(x),Var(x)),Const(IntLit(1))))
//│ Pretty-print: (x => x)(1)
//│ Keywords: ::=, =>, define, keyword, ~>
//│ Rules: default ::= Expr End 

:pe
keyword let
keyword =
keyword in
define LetIn ::= let Expr = Expr in Expr ~> ($1 => $3)($2)
let x = 1 in x
//│ |keyword| |let|↵|keyword| |=|↵|keyword| |in|↵|define| |LetIn| |::=| |let| |Expr| |=| |Expr| |in| |Expr| |~>| |(|$1| |=>| |$3|)|(|$2|)|↵|let| |x| |=| |1| |in| |x|
//│ AST: List(App(Lam(Var(x),Var(x)),Const(IntLit(1))))
//│ Pretty-print: (x => x)(1)
//│ Keywords: ::=, =>, define, keyword, ~>
//│ Rules: default ::= Expr End 
