:global
:p

keyword x
keyword y
keyword z
//│ |keyword| |x|↵|keyword| |y|↵|keyword| |z|
//│ AST: List()
//│ Keywords: ~>, =>, define, x, y, z, keyword, ::=
//│ Rules: 

:pe
keyword x
x
//│ |keyword| |x|↵|x|
//│ ╔══[PARSE ERROR] Expected nothing at all after start of statement; found 'x' keyword instead
//│ ║  l.14: 	x
//│ ╙──      	^
//│ AST: List(Empty)
//│ Keywords: ~>, =>, define, x, keyword, ::=
//│ Rules: 

:pe
keyword let
keyword =
keyword in
 
define LetIn ::= let Expr = Expr in Expr ~> ($1 => $3) $2
//│ |keyword| |let|↵|keyword| |=|↵|keyword| |in|↵|define| |LetIn| |::=| |let| |Expr| |=| |Expr| |in| |Expr| |~>| |(|$1| |=>| |$3|)| |$2|
//│ ╔══[PARSE ERROR] Expected end of input; found parenthesis section instead
//│ ║  l.28: 	define LetIn ::= let Expr = Expr in Expr ~> ($1 => $3) $2
//│ ╙──      	                                            ^^^^^^^^^^
//│ AST: List()
//│ Keywords: ~>, =>, in, define, let, keyword, =, ::=, LetIn
//│ Rules: 
