:js


fun foo() =
  1 + 2
//│ JS:
//│ let res; function foo() {  return 1 + 2 }; res = undefined;
//│ = undefined

foo
//│ JS:
//│ let res; res = foo;
//│ = [Function: foo]

foo()
//│ JS:
//│ let res, tmp; tmp = foo(); res = tmp;
//│ = 3

fun foo(x) =
  x + 1
//│ JS:
//│ let res; function foo(x) {  return x + 1 }; res = undefined;
//│ = undefined

foo(123)
//│ JS:
//│ let res, tmp; tmp = foo(123); res = tmp;
//│ = 124

fun foo(x) =
  x + 1 + 2
//│ JS:
//│ let res; function foo(x) { let tmp; tmp = x + 1; return tmp + 2 }; res = undefined;
//│ = undefined

foo(123)
//│ JS:
//│ let res, tmp; tmp = foo(123); res = tmp;
//│ = 126

fun foo() = bar()
fun bar() = 42
//│ JS:
//│ let res; function foo() {  return bar() }; function bar() {  return 42 }; res = undefined;
//│ = undefined

bar()
//│ JS:
//│ let res, tmp; tmp = bar(); res = tmp;
//│ = 42

foo()
//│ JS:
//│ let res, tmp; tmp = foo(); res = tmp;
//│ = 42

fun foo() = bar()
let r = foo()
fun bar() = 42
r
//│ JS:
//│ let res, r; function foo() {  return bar() }; r = foo(); function bar() {  return 42 }; res = r;
//│ = 42

// TODO raise initialization error at CT and RT
fun foo() = bar()
let r = foo()
fun bar() = r
r
//│ JS:
//│ let res, r; function foo() {  return bar() }; r = foo(); function bar() {  return r }; res = r;
//│ = undefined


declare val console
//│ JS:
//│ let res; res = undefined;
//│ = undefined

fun outer(x) =
  let r = x + 1
  fun nested(y) =
    r + x + y
  console.log(nested(x))
  nested
//│ JS:
//│ let res;
//│ function outer(x) {
//│   let r, tmp, tmp1;
//│   r = x + 1;
//│   function nested(y) {
//│     let tmp2;
//│     tmp2 = r + x;
//│     return tmp2 + y
//│   };
//│   tmp = nested(x);
//│   tmp1 = console.log(tmp);
//│   return nested
//│ };
//│ res = undefined;
//│ = undefined

let f = outer(100)
f(200)
//│ JS:
//│ let res, f, tmp; f = outer(100); tmp = f(200); res = tmp;
//│ // Standard Output:
//│ 301
//│ = 401






