:global
:noTypeCheck

fun (&&): (Bool, Bool) -> Bool
fun (===): (Any, Any) -> Bool
fun (++): (Str, Str) -> Str
fun toString: Any -> Str

fun (|>) pipe(x, f) = f(x)
fun (~~>) toBe(x, y) = if x === y then () else error
fun (<?) min(x, y) = if x < y then x else y
fun (>?) max(x, y) = if x > y then x else y
fun abs(x) = if x < 0 then -x else x


abstract class Option[T]: (Some[T] | None)
class Some[T](val value: T) extends Option[T]
module None extends Option[nothing]
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Expected a valid definition head, found infix application instead
//│ ║  l.17: 	class Some[T](val value: T) extends Option[T]
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Expected a valid definition head, found infix application instead
//│ ║  l.18: 	module None extends Option[nothing]
//│ ╙──      	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ FAILURE: Unexpected exception
//│ /!!!\ Uncaught error: scala.MatchError: InfixApp(App(App(Ident(Some),TyTup(List(Ident(T)))),Tup(List(TermDef(Val,None,Some(InfixApp(Ident(value),keyword ':',Ident(T))),None)))),keyword 'extends',App(Ident(Option),TyTup(List(Ident(T))))) (of class hkmc2.syntax.Tree$InfixApp)
//│ 	at: hkmc2.semantics.Elaborator.processHead$1(Elaborator.scala:360)
//│ 	at: hkmc2.semantics.Elaborator.go$1(Elaborator.scala:362)
//│ 	at: hkmc2.semantics.Elaborator.block$$anonfun$3(Elaborator.scala:387)
//│ 	at: hkmc2.utils.TraceLogger.trace(TraceLogger.scala:17)
//│ 	at: hkmc2.semantics.Elaborator.block(Elaborator.scala:387)
//│ 	at: hkmc2.semantics.Elaborator.topLevel(Elaborator.scala:441)
//│ 	at: hkmc2.MLsDiffMaker.processTrees(MLsDiffMaker.scala:121)
//│ 	at: hkmc2.MLsDiffMaker.processOrigin(MLsDiffMaker.scala:105)
//│ 	at: hkmc2.DiffMaker.processBlock(DiffMaker.scala:155)
//│ 	at: hkmc2.DiffMaker.rec(DiffMaker.scala:249)

fun (??) getOrElse(o, v) = if o is
  Some(v') then v'
  None then v
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Some`.
//│ ║  l.41: 	  Some(v') then v'
//│ ╙──      	  ^^^^

let anyToString = toString

abstract class List[out T]: (Cons[T] | Nil)
class Cons[out T](val head: T, val tail: List[T]) extends List[T]
module Nil extends List[nothing]
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Expected a valid definition head, found infix application instead
//│ ║  l.51: 	class Cons[out T](val head: T, val tail: List[T]) extends List[T]
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Expected a valid definition head, found infix application instead
//│ ║  l.52: 	module Nil extends List[nothing]
//│ ╙──      	       ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ FAILURE: Unexpected exception
//│ /!!!\ Uncaught error: scala.MatchError: InfixApp(App(App(Ident(Cons),TyTup(List(Modified(keyword 'out',Ident(T))))),Tup(List(TermDef(Val,None,Some(InfixApp(Ident(head),keyword ':',Ident(T))),None), TermDef(Val,None,Some(InfixApp(Ident(tail),keyword ':',App(Ident(List),TyTup(List(Ident(T)))))),None)))),keyword 'extends',App(Ident(List),TyTup(List(Ident(T))))) (of class hkmc2.syntax.Tree$InfixApp)
//│ 	at: hkmc2.semantics.Elaborator.processHead$1(Elaborator.scala:360)
//│ 	at: hkmc2.semantics.Elaborator.go$1(Elaborator.scala:362)
//│ 	at: hkmc2.semantics.Elaborator.block$$anonfun$3(Elaborator.scala:387)
//│ 	at: hkmc2.utils.TraceLogger.trace(TraceLogger.scala:17)
//│ 	at: hkmc2.semantics.Elaborator.block(Elaborator.scala:387)
//│ 	at: hkmc2.semantics.Elaborator.topLevel(Elaborator.scala:441)
//│ 	at: hkmc2.MLsDiffMaker.processTrees(MLsDiffMaker.scala:121)
//│ 	at: hkmc2.MLsDiffMaker.processOrigin(MLsDiffMaker.scala:105)
//│ 	at: hkmc2.DiffMaker.processBlock(DiffMaker.scala:155)
//│ 	at: hkmc2.DiffMaker.rec(DiffMaker.scala:249)

fun (::) cons(head, tail) = Cons(head, tail)
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Cons
//│ ║  l.74: 	fun (::) cons(head, tail) = Cons(head, tail)
//│ ╙──      	                            ^^^^

1 :: 2 :: 3 :: 4 :: Nil
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Nil
//│ ║  l.80: 	1 :: 2 :: 3 :: 4 :: Nil
//│ ╙──      	                    ^^^

abstract class Tree[out A]: (Empty | Node[A])
class Node[out A](value: A, left: Tree[A], right: Tree[A]) extends Tree[A]
module Empty extends Tree
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Expected a valid definition head, found infix application instead
//│ ║  l.87: 	class Node[out A](value: A, left: Tree[A], right: Tree[A]) extends Tree[A]
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Expected a valid definition head, found infix application instead
//│ ║  l.88: 	module Empty extends Tree
//│ ╙──      	       ^^^^^^^^^^^^^^^^^^
//│ FAILURE: Unexpected exception
//│ /!!!\ Uncaught error: scala.MatchError: InfixApp(App(App(Ident(Node),TyTup(List(Modified(keyword 'out',Ident(A))))),Tup(List(InfixApp(Ident(value),keyword ':',Ident(A)), InfixApp(Ident(left),keyword ':',App(Ident(Tree),TyTup(List(Ident(A))))), InfixApp(Ident(right),keyword ':',App(Ident(Tree),TyTup(List(Ident(A)))))))),keyword 'extends',App(Ident(Tree),TyTup(List(Ident(A))))) (of class hkmc2.syntax.Tree$InfixApp)
//│ 	at: hkmc2.semantics.Elaborator.processHead$1(Elaborator.scala:360)
//│ 	at: hkmc2.semantics.Elaborator.go$1(Elaborator.scala:362)
//│ 	at: hkmc2.semantics.Elaborator.block$$anonfun$3(Elaborator.scala:387)
//│ 	at: hkmc2.utils.TraceLogger.trace(TraceLogger.scala:17)
//│ 	at: hkmc2.semantics.Elaborator.block(Elaborator.scala:387)
//│ 	at: hkmc2.semantics.Elaborator.topLevel(Elaborator.scala:441)
//│ 	at: hkmc2.MLsDiffMaker.processTrees(MLsDiffMaker.scala:121)
//│ 	at: hkmc2.MLsDiffMaker.processOrigin(MLsDiffMaker.scala:105)
//│ 	at: hkmc2.DiffMaker.processBlock(DiffMaker.scala:155)
//│ 	at: hkmc2.DiffMaker.rec(DiffMaker.scala:249)

fun single(v) = Node(v, Empty, Empty)
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.110: 	fun single(v) = Node(v, Empty, Empty)
//│ ╙──       	                ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.110: 	fun single(v) = Node(v, Empty, Empty)
//│ ╙──       	                        ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.110: 	fun single(v) = Node(v, Empty, Empty)
//│ ╙──       	                               ^^^^^

fun show[A](t: Tree[A]): Str = if t is
  Node(v, l, r) then
    "(" ++ show(l) ++ " " ++ toString(v) ++ " " ++ show(r) ++ ")"
  Empty then "•"
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Tree
//│ ║  l.124: 	fun show[A](t: Tree[A]): Str = if t is
//│ ╙──       	               ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.125: 	  Node(v, l, r) then
//│ ╙──       	  ^^^^
//│ FAILURE: Unexpected exception
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: hkmc2.semantics.Elaborator$VarianceTraverser.traverseType(Elaborator.scala:483)
//│ 	at: hkmc2.semantics.Elaborator$Traverser.traverseType$$anonfun$7(Elaborator.scala:523)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
//│ 	at: scala.Option.foreach(Option.scala:437)
//│ 	at: hkmc2.semantics.Elaborator$Traverser.traverseType(Elaborator.scala:523)
//│ 	at: hkmc2.semantics.Elaborator.go$3$$anonfun$1$$anonfun$1(Elaborator.scala:449)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)

show(Empty)
show(Node(0, Empty, Empty))
show(Node(1, Node(0, Empty, Empty), Empty))
show(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)))
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.149: 	show(Empty)
//│ ╙──       	^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.149: 	show(Empty)
//│ ╙──       	     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.150: 	show(Node(0, Empty, Empty))
//│ ╙──       	^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.150: 	show(Node(0, Empty, Empty))
//│ ╙──       	     ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.150: 	show(Node(0, Empty, Empty))
//│ ╙──       	             ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.150: 	show(Node(0, Empty, Empty))
//│ ╙──       	                    ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.151: 	show(Node(1, Node(0, Empty, Empty), Empty))
//│ ╙──       	^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.151: 	show(Node(1, Node(0, Empty, Empty), Empty))
//│ ╙──       	     ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.151: 	show(Node(1, Node(0, Empty, Empty), Empty))
//│ ╙──       	             ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.151: 	show(Node(1, Node(0, Empty, Empty), Empty))
//│ ╙──       	                     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.151: 	show(Node(1, Node(0, Empty, Empty), Empty))
//│ ╙──       	                            ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.151: 	show(Node(1, Node(0, Empty, Empty), Empty))
//│ ╙──       	                                    ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.152: 	show(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)))
//│ ╙──       	^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.152: 	show(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)))
//│ ╙──       	     ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.152: 	show(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)))
//│ ╙──       	             ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.152: 	show(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)))
//│ ╙──       	                     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.152: 	show(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)))
//│ ╙──       	                            ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.152: 	show(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)))
//│ ╙──       	                                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.152: 	show(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)))
//│ ╙──       	                                            ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.152: 	show(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)))
//│ ╙──       	                                                   ^^^^^

fun insert(t, v) = if t is
  Node(v', l, r) and
    v < v' then Node(v', insert(l, v), r)
    v > v' then Node(v', l, insert(r, v))
    _ then t
  Empty then Node(v, Empty, Empty)
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.239: 	  Empty then Node(v, Empty, Empty)
//│ ╙──       	             ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.235: 	  Node(v', l, r) and
//│ ╙──       	  ^^^^

fun insert'(t, v) = if t is
  Node(v', l, r) and v
    < v' then Node(v', insert(l, v), r)
    > v' then Node(v', l, insert(r, v))
    else t
  Empty then Node(v, Empty, Empty)
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.254: 	  Empty then Node(v, Empty, Empty)
//│ ╙──       	             ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.250: 	  Node(v', l, r) and v
//│ ╙──       	  ^^^^

insert(Empty, 0) |> show
insert(Node(0, Empty, Empty), 0) |> show
insert(Node(1, Empty, Empty), 0) |> show
insert(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
insert(Node(1, Node(0, Empty, Empty), Empty), 2) |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.264: 	insert(Empty, 0) |> show
//│ ╙──       	       ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.264: 	insert(Empty, 0) |> show
//│ ╙──       	                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.265: 	insert(Node(0, Empty, Empty), 0) |> show
//│ ╙──       	       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.265: 	insert(Node(0, Empty, Empty), 0) |> show
//│ ╙──       	               ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.265: 	insert(Node(0, Empty, Empty), 0) |> show
//│ ╙──       	                      ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.265: 	insert(Node(0, Empty, Empty), 0) |> show
//│ ╙──       	                                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.266: 	insert(Node(1, Empty, Empty), 0) |> show
//│ ╙──       	       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.266: 	insert(Node(1, Empty, Empty), 0) |> show
//│ ╙──       	               ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.266: 	insert(Node(1, Empty, Empty), 0) |> show
//│ ╙──       	                      ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.266: 	insert(Node(1, Empty, Empty), 0) |> show
//│ ╙──       	                                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.267: 	insert(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.267: 	insert(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	               ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.267: 	insert(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	                       ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.267: 	insert(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	                              ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.267: 	insert(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	                                      ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.267: 	insert(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	                                                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.268: 	insert(Node(1, Node(0, Empty, Empty), Empty), 2) |> show
//│ ╙──       	       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.268: 	insert(Node(1, Node(0, Empty, Empty), Empty), 2) |> show
//│ ╙──       	               ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.268: 	insert(Node(1, Node(0, Empty, Empty), Empty), 2) |> show
//│ ╙──       	                       ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.268: 	insert(Node(1, Node(0, Empty, Empty), Empty), 2) |> show
//│ ╙──       	                              ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.268: 	insert(Node(1, Node(0, Empty, Empty), Empty), 2) |> show
//│ ╙──       	                                      ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.268: 	insert(Node(1, Node(0, Empty, Empty), Empty), 2) |> show
//│ ╙──       	                                                    ^^^^

fun fromList(l) =
  let fromList'(t, xs) =
    if xs is
      Cons(x, xs') then fromList'(insert(t, x), xs')
      Nil then t
  fromList'(Empty, l)
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Cons`.
//│ ║  l.361: 	      Cons(x, xs') then fromList'(insert(t, x), xs')
//│ ╙──       	      ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.363: 	  fromList'(Empty, l)
//│ ╙──       	            ^^^^^

fromList(1 :: 2 :: 3 :: 4 :: Nil) |> show
fromList(2 :: 1 :: 4 :: 3 :: Nil) |> show
fromList(4 :: 3 :: 2 :: 1 :: Nil) |> show
let example1 = fromList(1 :: 3 :: 2 :: 4 :: Nil)
example1 |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Nil
//│ ║  l.373: 	fromList(1 :: 2 :: 3 :: 4 :: Nil) |> show
//│ ╙──       	                             ^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.373: 	fromList(1 :: 2 :: 3 :: 4 :: Nil) |> show
//│ ╙──       	                                     ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Nil
//│ ║  l.374: 	fromList(2 :: 1 :: 4 :: 3 :: Nil) |> show
//│ ╙──       	                             ^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.374: 	fromList(2 :: 1 :: 4 :: 3 :: Nil) |> show
//│ ╙──       	                                     ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Nil
//│ ║  l.375: 	fromList(4 :: 3 :: 2 :: 1 :: Nil) |> show
//│ ╙──       	                             ^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.375: 	fromList(4 :: 3 :: 2 :: 1 :: Nil) |> show
//│ ╙──       	                                     ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Nil
//│ ║  l.376: 	let example1 = fromList(1 :: 3 :: 2 :: 4 :: Nil)
//│ ╙──       	                                            ^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.377: 	example1 |> show
//│ ╙──       	            ^^^^

fun contains(t, v) = if t is
  Node(v', l, r) and
    v < v' then contains(l, v)
    v > v' then contains(r, v)
    _ then true
  Empty then false
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.412: 	  Node(v', l, r) and
//│ ╙──       	  ^^^^

// Writing tests like this is very interesting.
contains(Empty, 0) ~~> false
contains(Node(0, Empty, Empty), 0) ~~> true
contains(Node(1, Empty, Empty), 0) ~~> false
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.423: 	contains(Empty, 0) ~~> false
//│ ╙──       	         ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.424: 	contains(Node(0, Empty, Empty), 0) ~~> true
//│ ╙──       	         ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.424: 	contains(Node(0, Empty, Empty), 0) ~~> true
//│ ╙──       	                 ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.424: 	contains(Node(0, Empty, Empty), 0) ~~> true
//│ ╙──       	                        ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.425: 	contains(Node(1, Empty, Empty), 0) ~~> false
//│ ╙──       	         ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.425: 	contains(Node(1, Empty, Empty), 0) ~~> false
//│ ╙──       	                 ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.425: 	contains(Node(1, Empty, Empty), 0) ~~> false
//│ ╙──       	                        ^^^^^

fun minValue(t) = if t is
  Empty then None
  Node(v, Empty, _) then Some(v)
  Node(_, l, _) then minValue(l)
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.458: 	  Node(_, l, _) then minValue(l)
//│ ╙──       	  ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.457: 	  Node(v, Empty, _) then Some(v)
//│ ╙──       	  ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: None
//│ ║  l.456: 	  Empty then None
//│ ╙──       	             ^^^^

minValue(Empty) ?? "not found"
minValue(Node(0, Empty, Empty)) ?? "not found"
minValue(example1) ?? "not found"
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.472: 	minValue(Empty) ?? "not found"
//│ ╙──       	         ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.473: 	minValue(Node(0, Empty, Empty)) ?? "not found"
//│ ╙──       	         ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.473: 	minValue(Node(0, Empty, Empty)) ?? "not found"
//│ ╙──       	                 ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.473: 	minValue(Node(0, Empty, Empty)) ?? "not found"
//│ ╙──       	                        ^^^^^

fun maxValue(t) = if t is
  Empty then None
  Node(v, _, Empty) then Some(v)
  Node(_, _, r) then maxValue(r)
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.495: 	  Node(_, _, r) then maxValue(r)
//│ ╙──       	  ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.494: 	  Node(v, _, Empty) then Some(v)
//│ ╙──       	  ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: None
//│ ║  l.493: 	  Empty then None
//│ ╙──       	             ^^^^

maxValue(Empty) ?? "not found"
maxValue(Node(0, Empty, Empty)) ?? "not found"
maxValue(example1) ?? "not found"
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.509: 	maxValue(Empty) ?? "not found"
//│ ╙──       	         ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.510: 	maxValue(Node(0, Empty, Empty)) ?? "not found"
//│ ╙──       	         ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.510: 	maxValue(Node(0, Empty, Empty)) ?? "not found"
//│ ╙──       	                 ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.510: 	maxValue(Node(0, Empty, Empty)) ?? "not found"
//│ ╙──       	                        ^^^^^

fun lowerBound(t, v) = if t is
  Node(v', l, r) and
    v < v' then lowerBound(l, v)
    v > v' then Some(lowerBound(r, v) ?? v')
    _ then Some(v')
  Empty then None
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: None
//│ ║  l.534: 	  Empty then None
//│ ╙──       	             ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.530: 	  Node(v', l, r) and
//│ ╙──       	  ^^^^

lowerBound(Empty, 0) ?? "not found"
lowerBound(Node(0, Empty, Empty), 0) ?? "not found"
lowerBound(Node(1, Empty, Empty), 0) ?? "not found"
lowerBound(Node(-1, Empty, Empty), 0) ?? "not found"
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.544: 	lowerBound(Empty, 0) ?? "not found"
//│ ╙──       	           ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.545: 	lowerBound(Node(0, Empty, Empty), 0) ?? "not found"
//│ ╙──       	           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.545: 	lowerBound(Node(0, Empty, Empty), 0) ?? "not found"
//│ ╙──       	                   ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.545: 	lowerBound(Node(0, Empty, Empty), 0) ?? "not found"
//│ ╙──       	                          ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.546: 	lowerBound(Node(1, Empty, Empty), 0) ?? "not found"
//│ ╙──       	           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.546: 	lowerBound(Node(1, Empty, Empty), 0) ?? "not found"
//│ ╙──       	                   ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.546: 	lowerBound(Node(1, Empty, Empty), 0) ?? "not found"
//│ ╙──       	                          ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.547: 	lowerBound(Node(-1, Empty, Empty), 0) ?? "not found"
//│ ╙──       	           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.547: 	lowerBound(Node(-1, Empty, Empty), 0) ?? "not found"
//│ ╙──       	                    ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.547: 	lowerBound(Node(-1, Empty, Empty), 0) ?? "not found"
//│ ╙──       	                           ^^^^^

lowerBound(example1, 0) ?? "not found"
lowerBound(example1, 1) ?? "not found"
lowerBound(example1, 2) ?? "not found"
lowerBound(example1, 3) ?? "not found"
lowerBound(example1, 4) ?? "not found"
lowerBound(example1, 5) ?? "not found"

let example2 = fromList(1 :: 5 :: 42 :: 10 :: 23 :: 59 :: 81 :: Nil)
lowerBound(example2, 0) ?? "not found"
lowerBound(example2, 25) ?? "not found"
lowerBound(example2, 99) ?? "not found"
lowerBound(example2, 7) ?? "not found"
lowerBound(example2, 32) ?? "not found"
lowerBound(example2, 41) ?? "not found"
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Nil
//│ ║  l.596: 	let example2 = fromList(1 :: 5 :: 42 :: 10 :: 23 :: 59 :: 81 :: Nil)
//│ ╙──       	                                                                ^^^

fun upperBound(t, v) = if t is
  Node(v', l, r) and
    v < v' then Some(upperBound(l, v) ?? v')
    v > v' then upperBound(r, v)
    _ then Some(v')
  Empty then None
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: None
//│ ║  l.613: 	  Empty then None
//│ ╙──       	             ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.609: 	  Node(v', l, r) and
//│ ╙──       	  ^^^^

upperBound(example2, 0) ?? "not found"
upperBound(example2, 25) ?? "not found"
upperBound(example2, 99) ?? "not found"
upperBound(example2, 7) ?? "not found"
upperBound(example2, 32) ?? "not found"
upperBound(example2, 41) ?? "not found"

fun remove(t, v) =
  if t is
    Node(v', l, r) and
      v < v' then Node(v', remove(l, v), r)
      v > v' then Node(v', l, remove(r, v))
      minValue(r) is
        None then l
        Some(v'') then Node(v'', l, remove(r, v''))
    Empty then Empty
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.632: 	    Node(v', l, r) and
//│ ╙──       	    ^^^^

remove(Empty, 0) |> show
remove(Node(0, Empty, Empty), 0) |> show
remove(Node(1, Empty, Empty), 0) |> show
remove(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
remove(Node(1, Empty, Node(2, Empty, Empty)), 2) |> show
remove(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)), 1) |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.644: 	remove(Empty, 0) |> show
//│ ╙──       	       ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.644: 	remove(Empty, 0) |> show
//│ ╙──       	                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.645: 	remove(Node(0, Empty, Empty), 0) |> show
//│ ╙──       	       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.645: 	remove(Node(0, Empty, Empty), 0) |> show
//│ ╙──       	               ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.645: 	remove(Node(0, Empty, Empty), 0) |> show
//│ ╙──       	                      ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.645: 	remove(Node(0, Empty, Empty), 0) |> show
//│ ╙──       	                                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.646: 	remove(Node(1, Empty, Empty), 0) |> show
//│ ╙──       	       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.646: 	remove(Node(1, Empty, Empty), 0) |> show
//│ ╙──       	               ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.646: 	remove(Node(1, Empty, Empty), 0) |> show
//│ ╙──       	                      ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.646: 	remove(Node(1, Empty, Empty), 0) |> show
//│ ╙──       	                                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.647: 	remove(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.647: 	remove(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	               ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.647: 	remove(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	                       ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.647: 	remove(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	                              ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.647: 	remove(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	                                      ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.647: 	remove(Node(1, Node(0, Empty, Empty), Empty), 0) |> show
//│ ╙──       	                                                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.648: 	remove(Node(1, Empty, Node(2, Empty, Empty)), 2) |> show
//│ ╙──       	       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.648: 	remove(Node(1, Empty, Node(2, Empty, Empty)), 2) |> show
//│ ╙──       	               ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.648: 	remove(Node(1, Empty, Node(2, Empty, Empty)), 2) |> show
//│ ╙──       	                      ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.648: 	remove(Node(1, Empty, Node(2, Empty, Empty)), 2) |> show
//│ ╙──       	                              ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.648: 	remove(Node(1, Empty, Node(2, Empty, Empty)), 2) |> show
//│ ╙──       	                                     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.648: 	remove(Node(1, Empty, Node(2, Empty, Empty)), 2) |> show
//│ ╙──       	                                                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.649: 	remove(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)), 1) |> show
//│ ╙──       	       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.649: 	remove(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)), 1) |> show
//│ ╙──       	               ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.649: 	remove(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)), 1) |> show
//│ ╙──       	                       ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.649: 	remove(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)), 1) |> show
//│ ╙──       	                              ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.649: 	remove(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)), 1) |> show
//│ ╙──       	                                      ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.649: 	remove(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)), 1) |> show
//│ ╙──       	                                              ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.649: 	remove(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)), 1) |> show
//│ ╙──       	                                                     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.649: 	remove(Node(1, Node(0, Empty, Empty), Node(2, Empty, Empty)), 1) |> show
//│ ╙──       	                                                                    ^^^^

example1 |> show
remove(example1, 0) |> show
remove(example1, 1) |> show
remove(example1, 2) |> show
remove(example1, 3) |> show
remove(example1, 4) |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.771: 	example1 |> show
//│ ╙──       	            ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.772: 	remove(example1, 0) |> show
//│ ╙──       	                       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.773: 	remove(example1, 1) |> show
//│ ╙──       	                       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.774: 	remove(example1, 2) |> show
//│ ╙──       	                       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.775: 	remove(example1, 3) |> show
//│ ╙──       	                       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.776: 	remove(example1, 4) |> show
//│ ╙──       	                       ^^^^

class Pair[A, B](val first: A, val second: B)

fun extractMin(t) =
  if t is
    Node(v, Empty, r) then Pair(Some(v), r)
    Node(v, l, r) and
      extractMin(l) is Pair(m, l') then
        Pair(m, Node(v, l', r))
    Empty then Pair(None, Empty)
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: None
//│ ║  l.810: 	    Empty then Pair(None, Empty)
//│ ╙──       	                    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.807: 	    Node(v, l, r) and
//│ ╙──       	    ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.806: 	    Node(v, Empty, r) then Pair(Some(v), r)
//│ ╙──       	    ^^^^

extractMin(example1).first ?? "not found"
extractMin(example1).second |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.825: 	extractMin(example1).second |> show
//│ ╙──       	                               ^^^^

fun merge(l, r) =
  if extractMin(r) is
    Pair(None, _) then l
    Pair(Some(m), r') then Node(m, l, r')
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Some`.
//│ ║  l.834: 	    Pair(Some(m), r') then Node(m, l, r')
//│ ╙──       	         ^^^^

merge(Empty, Empty) |> show
merge(Empty, Node(0, Empty, Empty)) |> show
merge(Node(0, Empty, Empty), Empty) |> show
merge(Node(0, Empty, Empty), Node(1, Empty, Empty)) |> show
merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.840: 	merge(Empty, Empty) |> show
//│ ╙──       	      ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.840: 	merge(Empty, Empty) |> show
//│ ╙──       	             ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.840: 	merge(Empty, Empty) |> show
//│ ╙──       	                       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.841: 	merge(Empty, Node(0, Empty, Empty)) |> show
//│ ╙──       	      ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.841: 	merge(Empty, Node(0, Empty, Empty)) |> show
//│ ╙──       	             ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.841: 	merge(Empty, Node(0, Empty, Empty)) |> show
//│ ╙──       	                     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.841: 	merge(Empty, Node(0, Empty, Empty)) |> show
//│ ╙──       	                            ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.841: 	merge(Empty, Node(0, Empty, Empty)) |> show
//│ ╙──       	                                       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.842: 	merge(Node(0, Empty, Empty), Empty) |> show
//│ ╙──       	      ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.842: 	merge(Node(0, Empty, Empty), Empty) |> show
//│ ╙──       	              ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.842: 	merge(Node(0, Empty, Empty), Empty) |> show
//│ ╙──       	                     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.842: 	merge(Node(0, Empty, Empty), Empty) |> show
//│ ╙──       	                             ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.842: 	merge(Node(0, Empty, Empty), Empty) |> show
//│ ╙──       	                                       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.843: 	merge(Node(0, Empty, Empty), Node(1, Empty, Empty)) |> show
//│ ╙──       	      ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.843: 	merge(Node(0, Empty, Empty), Node(1, Empty, Empty)) |> show
//│ ╙──       	              ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.843: 	merge(Node(0, Empty, Empty), Node(1, Empty, Empty)) |> show
//│ ╙──       	                     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.843: 	merge(Node(0, Empty, Empty), Node(1, Empty, Empty)) |> show
//│ ╙──       	                             ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.843: 	merge(Node(0, Empty, Empty), Node(1, Empty, Empty)) |> show
//│ ╙──       	                                     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.843: 	merge(Node(0, Empty, Empty), Node(1, Empty, Empty)) |> show
//│ ╙──       	                                            ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.843: 	merge(Node(0, Empty, Empty), Node(1, Empty, Empty)) |> show
//│ ╙──       	                                                       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.844: 	merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ ╙──       	      ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.844: 	merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ ╙──       	              ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.844: 	merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ ╙──       	                     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.844: 	merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ ╙──       	                             ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.844: 	merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ ╙──       	                                     ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.844: 	merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ ╙──       	                                             ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.844: 	merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ ╙──       	                                                    ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.844: 	merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ ╙──       	                                                            ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.844: 	merge(Node(0, Empty, Empty), Node(2, Node(1, Empty, Empty), Empty)) |> show
//│ ╙──       	                                                                       ^^^^

fun removeGte(t, v) =
  if t is
    Node(v', l, r) and
      v < v' then removeGte(l, v)
      v > v' then Node(v', l, removeGte(r, v))
      _ then l // lucky case
    Empty then Empty
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.964: 	    Node(v', l, r) and
//│ ╙──       	    ^^^^

removeGte(Empty, 0) |> show
removeGte(example1, 0) |> show
removeGte(example1, 1) |> show
removeGte(example1, 2) |> show
removeGte(example1, 3) |> show
removeGte(example1, 4) |> show
removeGte(example1, 5) |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.974: 	removeGte(Empty, 0) |> show
//│ ╙──       	          ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.974: 	removeGte(Empty, 0) |> show
//│ ╙──       	                       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.975: 	removeGte(example1, 0) |> show
//│ ╙──       	                          ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.976: 	removeGte(example1, 1) |> show
//│ ╙──       	                          ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.977: 	removeGte(example1, 2) |> show
//│ ╙──       	                          ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.978: 	removeGte(example1, 3) |> show
//│ ╙──       	                          ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.979: 	removeGte(example1, 4) |> show
//│ ╙──       	                          ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.980: 	removeGte(example1, 5) |> show
//│ ╙──       	                          ^^^^

example2 |> show
removeGte(example2, 10) |> show
removeGte(example2, 22) |> show
removeGte(example2, 23) |> show
removeGte(example2, 24) |> show
removeGte(example2, 70) |> show
removeGte(example2, 99) |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1014: 	example2 |> show
//│ ╙──        	            ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1015: 	removeGte(example2, 10) |> show
//│ ╙──        	                           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1016: 	removeGte(example2, 22) |> show
//│ ╙──        	                           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1017: 	removeGte(example2, 23) |> show
//│ ╙──        	                           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1018: 	removeGte(example2, 24) |> show
//│ ╙──        	                           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1019: 	removeGte(example2, 70) |> show
//│ ╙──        	                           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1020: 	removeGte(example2, 99) |> show
//│ ╙──        	                           ^^^^

fun removeLt(t, v) =
  if t is
    Node(v', l, r) and
      v' < v then removeLt(r, v)
      else Node(v', removeLt(l, v), r)
    Empty then Empty
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.1052: 	    Node(v', l, r) and
//│ ╙──        	    ^^^^

example2 |> show
removeLt(example2, 10) |> show
removeLt(example2, 22) |> show
removeLt(example2, 23) |> show
removeLt(example2, 24) |> show
removeLt(example2, 70) |> show
removeLt(example2, 99) |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1061: 	example2 |> show
//│ ╙──        	            ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1062: 	removeLt(example2, 10) |> show
//│ ╙──        	                          ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1063: 	removeLt(example2, 22) |> show
//│ ╙──        	                          ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1064: 	removeLt(example2, 23) |> show
//│ ╙──        	                          ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1065: 	removeLt(example2, 24) |> show
//│ ╙──        	                          ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1066: 	removeLt(example2, 70) |> show
//│ ╙──        	                          ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1067: 	removeLt(example2, 99) |> show
//│ ╙──        	                          ^^^^

// Remove elements from `begin` until `end`.
fun removeRange(t, begin, end) =
  if t is
    Node(v, l, r) and
      begin > v then Node(v, l, removeRange(r, begin, end))
      end <= v then Node(v, removeRange(l, begin, end), r)
      _ then merge(removeGte(l, begin), removeLt(r, end))
    Empty then Empty
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.1100: 	    Node(v, l, r) and
//│ ╙──        	    ^^^^

example2 |> show
removeRange(example2, 1, 82) |> show
removeRange(example2, 1, 50) |> show
removeRange(example2, 50, 81) |> show
removeRange(example2, 20, 60) |> show
removeRange(example2, 20, 24) |> show
removeRange(example2, 59, 60) |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1110: 	example2 |> show
//│ ╙──        	            ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1111: 	removeRange(example2, 1, 82) |> show
//│ ╙──        	                                ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1112: 	removeRange(example2, 1, 50) |> show
//│ ╙──        	                                ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1113: 	removeRange(example2, 50, 81) |> show
//│ ╙──        	                                 ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1114: 	removeRange(example2, 20, 60) |> show
//│ ╙──        	                                 ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1115: 	removeRange(example2, 20, 24) |> show
//│ ╙──        	                                 ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1116: 	removeRange(example2, 59, 60) |> show
//│ ╙──        	                                 ^^^^

fun size(t) =
  if t is
    Node(_, l, r) then 1 + size(l) + size(r)
    Empty then 0
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.1148: 	    Node(_, l, r) then 1 + size(l) + size(r)
//│ ╙──        	    ^^^^

size(Empty) ~~> 0
size(Node(0, Empty, Empty)) ~~> 1
size(example1) ~~> 4
size(example2) ~~> 7
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1155: 	size(Empty) ~~> 0
//│ ╙──        	     ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.1156: 	size(Node(0, Empty, Empty)) ~~> 1
//│ ╙──        	     ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1156: 	size(Node(0, Empty, Empty)) ~~> 1
//│ ╙──        	             ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1156: 	size(Node(0, Empty, Empty)) ~~> 1
//│ ╙──        	                    ^^^^^

fun inverse(t) =
  if t is
    Node(v, l, r) then Node(v, inverse(r), inverse(l))
    Empty then Empty
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.1178: 	    Node(v, l, r) then Node(v, inverse(r), inverse(l))
//│ ╙──        	    ^^^^

inverse(Empty) |> show
inverse(Node(0, Empty, Empty)) |> show
inverse(example1) |> show
inverse(example2) |> show
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1185: 	inverse(Empty) |> show
//│ ╙──        	        ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1185: 	inverse(Empty) |> show
//│ ╙──        	                  ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.1186: 	inverse(Node(0, Empty, Empty)) |> show
//│ ╙──        	        ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1186: 	inverse(Node(0, Empty, Empty)) |> show
//│ ╙──        	                ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1186: 	inverse(Node(0, Empty, Empty)) |> show
//│ ╙──        	                       ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1186: 	inverse(Node(0, Empty, Empty)) |> show
//│ ╙──        	                                  ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1187: 	inverse(example1) |> show
//│ ╙──        	                     ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: show
//│ ║  l.1188: 	inverse(example2) |> show
//│ ╙──        	                     ^^^^

fun height(t) =
  if t is
    Node(_, l, r) then 1 + max(height(l), height(r))
    Empty then 0
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.1224: 	    Node(_, l, r) then 1 + max(height(l), height(r))
//│ ╙──        	    ^^^^

height(Empty) ~~> 0
height(Node(0, Empty, Empty)) ~~> 1
height(example1) ~~> 3
height(example2) ~~> 5
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1231: 	height(Empty) ~~> 0
//│ ╙──        	       ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.1232: 	height(Node(0, Empty, Empty)) ~~> 1
//│ ╙──        	       ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1232: 	height(Node(0, Empty, Empty)) ~~> 1
//│ ╙──        	               ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1232: 	height(Node(0, Empty, Empty)) ~~> 1
//│ ╙──        	                      ^^^^^

fun isBalanced(t) =
  if t is
    Empty then true
    Node(_, l, r) and height(l) is hl and height(r) is hr then
      // The precedence of `<=` seems to be broken.
      (abs(hl - hr) <= 1) && isBalanced(l) && isBalanced(r)
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Unknown constructor `Node`.
//│ ║  l.1255: 	    Node(_, l, r) and height(l) is hl and height(r) is hr then
//│ ╙──        	    ^^^^

isBalanced(Empty) ~~> true
isBalanced(Node(0, Empty, Empty)) ~~> true
isBalanced(example1) ~~> false
isBalanced(example2) ~~> false
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1263: 	isBalanced(Empty) ~~> true
//│ ╙──        	           ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.1264: 	isBalanced(Node(0, Empty, Empty)) ~~> true
//│ ╙──        	           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1264: 	isBalanced(Node(0, Empty, Empty)) ~~> true
//│ ╙──        	                   ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1264: 	isBalanced(Node(0, Empty, Empty)) ~~> true
//│ ╙──        	                          ^^^^^

isBalanced(Node(1, single(-1), single(3))) ~~> true
isBalanced(Node(1, single(-1), Node(3, single(2), Empty))) ~~> true
isBalanced(Node(1, single(-1), Node(3, Empty, single(4)))) ~~> true
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.1284: 	isBalanced(Node(1, single(-1), single(3))) ~~> true
//│ ╙──        	           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.1285: 	isBalanced(Node(1, single(-1), Node(3, single(2), Empty))) ~~> true
//│ ╙──        	           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.1285: 	isBalanced(Node(1, single(-1), Node(3, single(2), Empty))) ~~> true
//│ ╙──        	                               ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1285: 	isBalanced(Node(1, single(-1), Node(3, single(2), Empty))) ~~> true
//│ ╙──        	                                                  ^^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.1286: 	isBalanced(Node(1, single(-1), Node(3, Empty, single(4)))) ~~> true
//│ ╙──        	           ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Node
//│ ║  l.1286: 	isBalanced(Node(1, single(-1), Node(3, Empty, single(4)))) ~~> true
//│ ╙──        	                               ^^^^
//│ FAILURE: Unexpected type error
//│ ╔══[ERROR] Name not found: Empty
//│ ║  l.1286: 	isBalanced(Node(1, single(-1), Node(3, Empty, single(4)))) ~~> true
//│ ╙──        	                                       ^^^^^
