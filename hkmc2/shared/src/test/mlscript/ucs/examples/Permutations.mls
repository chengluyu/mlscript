:import ../prelude/List.mls
//│ Imported 28 members
:import ../prelude/String.mls
//│ Imported 30 members


fun (|>) pipe(x, f) = f(x)


fun (:::) appendAll[A](xs: List[A], ys: List[A]): List[A] =
  if xs is
    Nil then ys
    Cons(x, xs') then x :: (xs' ::: ys)
fun (:+) append[A](xs, x): List[A] = xs ::: (x :: Nil)
fun reverse(xs) =
  let aux(acc, xs) =
    if xs is
      Nil then acc
      Cons(x, xs') then aux(x :: acc, xs')
  aux(Nil, xs)
fun join(sep) =
  let aux(acc, xs) =
    if xs is
      Nil then acc
      Cons(x, xs') then aux(acc ++ sep ++ toString(x), xs')
  (xs) =>
    if xs is
      Cons(x, xs') then aux(toString(x), xs')
      Nil then ""
fun showList(xs) = "[" ++ join(", ")(xs) ++ "]"
fun foldLeft(f)(z) =
  let aux(acc, xs) =
    if xs is
      Nil then acc
      Cons(x, xs') then aux(f(acc, x), xs')
  (xs) => aux(z, xs)
fun map(f, xs) =
  if xs is
    Nil then Nil
    Cons(x, xs') then f(x) :: map(f, xs')
fun showListList(xs) = "[" ++ join(", ")(map(showList, xs)) ++ "]"

fun insertAllPositions(z) =
  let aux(prev, acc, xs) =
    if xs is
      Nil then ((prev :+ z) :: acc) |> reverse
      Cons(head, tail) then
        let nu = ((prev :+ z) ::: xs)
        aux(prev :+ head, nu :: acc, tail)
  xs => aux(Nil, Nil, xs)

insertAllPositions(0)(1 :: 2 :: 3 :: Nil) |> showListList

fun permutations(xs) =
  if xs is
    Nil then Nil
    Cons(x, Nil) then (x :: Nil) :: Nil
    Cons(x, xs') then foldLeft((acc, ys) => acc ::: insertAllPositions(x)(ys))(Nil)(permutations(xs'))

permutations(Nil) |> showListList
permutations(1 :: Nil) |> showListList
permutations(1 :: 2 :: Nil) |> showListList
permutations(1 :: 2 :: 3 :: Nil) |> showListList

fun filterNot(f, xs) =
  if xs is
    Nil then Nil
    Cons(x, xs') then
      if f(x) then filterNot(f, xs')
      else x :: filterNot(f, xs')

fun permutations'(xs) =
  if xs is
    Nil then Nil
    Cons(x, Nil) then (x :: Nil) :: Nil
    else
      let f(acc, x) = acc ::: map((ys) => x :: ys, permutations'(filterNot((y) => x == y, xs)))
      foldLeft(f)(Nil)(xs)

permutations'(Nil) |> showListList
permutations'(1 :: Nil) |> showListList
permutations'(1 :: 2 :: Nil) |> showListList
permutations'(1 :: 2 :: 3 :: Nil) |> showListList
