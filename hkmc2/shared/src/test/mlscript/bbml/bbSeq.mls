:bbml



class Seq[A, E](next: () ->{E} A)
//│ Type: ⊤

fun map: [A, B, E] -> Seq[out A, out E] -> (A ->{E} B) -> Seq[out B, out E]
//│ Type: ⊤

// * Note: equivalent since Seq is covariant:
// fun map: [A, B, E, F] -> Seq[out A, out E] -> (A ->{F} B) -> Seq[out B, out E | F]

// * Forces the elements of the sequence to be evaluated and caches them
fun force_cache: [A, B, E] -> Seq[out A, out E] ->{E} Seq[out B, Nothing]
//│ Type: ⊤


// * Dummy implementation
fun mapi: [A, E] -> Seq[out A, out E] -> ((Int, A) ->{E} A) ->{Alloc} Seq[out A, out E]
fun mapi = s => f =>
  region r in
    map(s) of x => f(0, x)
//│ Type: ⊤

// * Should be an error. This definition would not be referentially transparent.
// * The error message needs improvement, though.
:e
fun mapi: [A, E] -> Seq[out A, out E] -> ((Int, A) ->{E} A) ->{Alloc} Seq[out A, out E]
fun mapi = s => f =>
  region r in
    let i = r.ref 0
    map(s) of x =>
      i := !i + 1
      f(!i, x)
//│ ╔══[ERROR] Type error in region expression with expected type Seq[out <α>23_2, out <α>24_2]
//│ ║  l.32: 	    let i = r.ref 0
//│ ║        	            ^^^^^^^
//│ ║  l.33: 	    map(s) of x =>
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.34: 	      i := !i + 1
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.35: 	      f(!i, x)
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── because: cannot constrain  Seq[out α36_2, out α37_2]  <:  Seq[out <α>23_2, out <α>24_2]
//│ ╟── because: cannot constrain  D( α37_2 )  <:  <α>24_2
//│ ╟── because: cannot constrain  α37_2  <:  ¬(~<α>24_2)
//│ ╟── because: cannot constrain  ¬⊥ ∧ α38_2  <:  ¬(~<α>24_2)
//│ ╟── because: cannot constrain  α38_2  <:  ¬(~<α>24_2)
//│ ╙── because: cannot constrain  ¬⊥  <:  ¬(~<α>24_2)
//│ ╔══[ERROR] Type error in region expression with expected type Seq[out <α>23_2, out <α>24_2]
//│ ║  l.32: 	    let i = r.ref 0
//│ ║        	            ^^^^^^^
//│ ║  l.33: 	    map(s) of x =>
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.34: 	      i := !i + 1
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.35: 	      f(!i, x)
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── because: cannot constrain  Seq[out α36_2, out α37_2]  <:  Seq[out <α>23_2, out <α>24_2]
//│ ╟── because: cannot constrain  D( α37_2 )  <:  <α>24_2
//│ ╟── because: cannot constrain  α37_2  <:  ¬(~<α>24_2)
//│ ╟── because: cannot constrain  ¬⊥ ∧ α38_2  <:  ¬(~<α>24_2)
//│ ╟── because: cannot constrain  α38_2  <:  ¬(~<α>24_2)
//│ ╙── because: cannot constrain  ¬⊥  <:  ¬(~<α>24_2)
//│ ╔══[ERROR] Type error in region expression with expected type Seq[out <α>23_2, out <α>24_2]
//│ ║  l.32: 	    let i = r.ref 0
//│ ║        	            ^^^^^^^
//│ ║  l.33: 	    map(s) of x =>
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.34: 	      i := !i + 1
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.35: 	      f(!i, x)
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── because: cannot constrain  Seq[out α36_2, out α37_2]  <:  Seq[out <α>23_2, out <α>24_2]
//│ ╟── because: cannot constrain  D( α37_2 )  <:  <α>24_2
//│ ╟── because: cannot constrain  α37_2  <:  ¬(~<α>24_2)
//│ ╟── because: cannot constrain  ¬⊥ ∧ α38_2  <:  ¬(~<α>24_2)
//│ ╟── because: cannot constrain  α38_2  <:  ¬(~<α>24_2)
//│ ╙── because: cannot constrain  ¬⊥  <:  ¬(~<α>24_2)
//│ Type: ⊤

// * Notice the inferred type, which produces an unusable Sequence (of effect `?` ie `Any`)
fun mapi = s => f =>
  region r in
    let i = r.ref 0
    map(s) of x =>
      i := !i + 1
      f(!i, x)
mapi
//│ Type: forall α47_2, α48_2, α58_2, α59_2: Seq[out α47_2, out α48_2] -> (((Int, α47_2) ->{α59_2} α58_2) ->{Alloc} Seq[out α58_2, ?])

// * This version is correct as it keeps the mutation encapsulated within the region
fun mapi_force: [A, E] -> Seq[out A, out E] -> ((Int, A) ->{E} A) ->{Alloc | E} Seq[out A, Nothing]
fun mapi_force = s => f =>
  region r in
    let i = r.ref 0
    force_cache of map(s) of x =>
      i := !i + 1
      f(!i, x)
//│ Type: ⊤

// * An alternative version that takes an existing region in parameter
fun mapi: [A, R, E] -> (Seq[out A, out E], Region[R]) -> ((Int, A) ->{E} A) ->{R | Alloc} Seq[out A, out E | R]
fun mapi = (s, r) => f =>
  let i = r.ref 0
  map(s) of x =>
    i := !i + 1
    f(!i, x)
//│ Type: ⊤

// * Simpler; should be equivalent when Region is covariant
fun mapi: [A, E] -> (Seq[out A, out E], Region[E]) -> ((Int, A) ->{E} A) ->{E | Alloc} Seq[out A, out E]
fun mapi = (s, r) => f =>
  let i = r.ref 0
  map(s) of x =>
    i := !i + 1
    f(!i, x)
//│ Type: ⊤


// * Example usage

fun mkSeq: [A, E] -> (() ->{E} A) ->{E} Seq[out A, out E]
fun head: [A, E] -> Seq[out A, out E] ->{E} A
//│ Type: ⊤

region r in
  let sum = r.ref 0
  let s1 = mkSeq of () =>
    sum := !sum + 1
    !sum
  let s2 = mapi(s1, r) of (x, i) => x * i
  !sum + head(s2)
//│ Type: Int



