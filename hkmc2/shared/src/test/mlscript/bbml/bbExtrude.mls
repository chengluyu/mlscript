:bbml

fun f(y) =
  let local = ((x => y(x) + 1): [A] -> A -> Int) in y
//│ Type: ⊤

// * the parameter type of y is extruded.
f
//│ Type: forall α1_2: α1_2 -> α1_2
//│ Where:
//│   α1_2 <: ⊤ -> Int

fun foo: [A] -> A -> Int
fun foo(x) = 0
//│ Type: ⊤

foo
//│ Type: (⊤) ->{⊥} Int

f(foo)
//│ Type: ⊤ -> Int

fun g: ([A] -> A -> Int) -> ([A] -> A -> Int)
fun g(y) =
  let local = ((x => y(x) + 1): ([A] -> A -> Int)) in y
//│ Type: ⊤

g
//│ Type: (forall α17_2: (⊥) ->{⊥} Int) ->{⊥} forall α18_2: (⊤) ->{⊥} Int

g(foo)
//│ Type: (⊤) ->{⊥} Int

:e
y `=> (let t = run(x `=> x `+ y) in y)
//│ ╔══[ERROR] Type error in quoted term with expected type CodeBase[out α28_3, ⊥, ?]
//│ ║  l.35: 	y `=> (let t = run(x `=> x `+ y) in y)
//│ ║        	                   ^^^^^^^^^^^^
//│ ╟── because: cannot constrain  CodeBase[out α29_5 -> α36_5, out α38_4, ?]  <:  CodeBase[out α28_3, ⊥, ?]
//│ ╟── because: cannot constrain  D( α38_4 )  <:  ⊥
//│ ╟── because: cannot constrain  α38_4  <:  ¬()
//│ ╙── because: cannot constrain  ¬⊥ ∧ <α>27_3  <:  ¬()
//│ Type: CodeBase[out α26_3 -> α26_3, ⊥, ?]
//│ Where:
//│   α26_3 <: Int

class C[A](m: A, n: A -> Int)
//│ Type: ⊤


fun f: [A] -> ([B] -> (C[out B] & A) -> B) -> A -> Int
f
//│ Type: forall α44_2: (forall α45_3: (C[out α45_3] ∧ α44_2) ->{⊥} α45_3) ->{⊥} (α44_2) ->{⊥} Int

fun g: [D] -> C[in Int out D] -> D
g
//│ Type: forall α46_2: (C[in Int out α46_2]) ->{⊥} α46_2


f(g)
//│ Type: (¬C[?] ∨ C[in Int out ⊥]) ->{⊥} Int

fun foo: C[in Int out Nothing]
foo
//│ Type: C[in Int out ⊥]

fun bar: C[in Int out Int]
bar
//│ Type: C[Int]

f(g)(foo)
//│ Type: Int

:fixme // ???
f(g)(bar)
//│ ╔══[ERROR] Type error in reference with expected type α55_1
//│ ║  l.75: 	f(g)(bar)
//│ ║        	     ^^^
//│ ╟── because: cannot constrain  C[Int]  <:  α55_1
//│ ╟── because: cannot constrain  C[in D( Int ) out D( Int )]  <:  α55_1
//│ ╟── because: cannot constrain  C[in D( Int ) out D( Int )]  <:  ¬C[in D() out ¬⊥] ∨ C[in D( Int ) out ¬⊥ ∧ α58_1]
//│ ╟── because: cannot constrain  (D( Int )) ∧ (D(  ))  <:  ¬⊥ ∧ α58_1
//│ ╟── because: cannot constrain  Int  <:  α58_1
//│ ╙── because: cannot constrain  Int  <:  ⊥
//│ Type: Int
