:parseOnly


:pe
mut
//│ ╔══[PARSE ERROR] Expected expression after modifier keyword 'mut'; found end of input instead
//│ ║  l.5: 	mut
//│ ╙──     	   ^
//│ Parsed:
//│ 	Error()

mut x
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Ident(x))

mut
  x
  y
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Ident(x))
//│ 	Modified(keyword 'mut',None,Ident(y))

mut let x = 1
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Let(Ident(x),IntLit(1),None))

mut
  let x = 1
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Let(Ident(x),IntLit(1),None))

mut
  let x = 1
  in x
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Let(Ident(x),IntLit(1),Some(Ident(x))))

mut
  let x = 1
  let y = 2
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Let(Ident(x),IntLit(1),None))
//│ 	Modified(keyword 'mut',None,Let(Ident(y),IntLit(2),None))

mut
  let
    x = 1
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Let(Ident(x),IntLit(1),None))

mut
  let
    x = 1
  let
    y = 1
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Let(Ident(x),IntLit(1),None))
//│ 	Modified(keyword 'mut',None,Let(Ident(y),IntLit(1),None))

mut
  let
    x = 1
    y = 2
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Let(Ident(x),IntLit(1),None))
//│ 	Modified(keyword 'mut',None,Let(Ident(y),IntLit(2),None))

mut
  let
    x = 1 in x
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Let(Ident(x),IntLit(1),Some(Ident(x))))

mut
  let
    x = 1 in x
  let
    y = 2 in y
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Let(Ident(x),IntLit(1),Some(Ident(x))))
//│ 	Modified(keyword 'mut',None,Let(Ident(y),IntLit(2),Some(Ident(y))))

// TODO currently we only look at the next token to see if it's an indented block...
:fixme
mut let
  x = 1
  y = 2
//│ ╔══[PARSE ERROR] Unexpected identifier here
//│ ║  l.87: 	  y = 2
//│ ╙──      	  ^
//│ Parsed:
//│ 	Modified(keyword 'mut',None,Let(Ident(x),IntLit(1),None))


