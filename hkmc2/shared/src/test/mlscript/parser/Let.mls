:global
:parseOnly


:pe
let
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found end of input instead
//│ ║  l.6: 	let
//│ ╙──     	   ^
//│ Parsed:
//│ 	Error()

:pe
let x
//│ ╔══[PARSE ERROR] Expected '=' keyword after 'let' binding head; found end of input instead
//│ ║  l.14: 	let x
//│ ╙──      	     ^
//│ Parsed:
//│ 	Error()

:pe
let x =
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding equals sign; found end of input instead
//│ ║  l.22: 	let x =
//│ ╙──      	       ^
//│ Parsed:
//│ 	Error()

let x = y
//│ Parsed:
//│ 	Let(Ident(x),Ident(y),None)

let x =
  y
//│ Parsed:
//│ 	Let(Ident(x),Ident(y),None)

:pe
let x = y in
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding `in` clause; found end of input instead
//│ ║  l.39: 	let x = y in
//│ ╙──      	            ^
//│ Parsed:
//│ 	Error()

let x = y in z
//│ Parsed:
//│ 	Let(Ident(x),Ident(y),Some(Ident(z)))

:pe
let x = y class
//│ ╔══[PARSE ERROR] Expected end of input; found 'class' keyword instead
//│ ║  l.51: 	let x = y class
//│ ╙──      	          ^^^^^
//│ Parsed:
//│ 	Let(Ident(x),Ident(y),None)



let x = y
foo
//│ Parsed:
//│ 	Let(Ident(x),Ident(y),None)
//│ 	Ident(foo)


:pe
let
  x
//│ ╔══[PARSE ERROR] Expected '=' keyword after 'let' binding head; found end of input instead
//│ ║  l.69: 	  x
//│ ╙──      	   ^
//│ Parsed:
//│ 	Error()

let
  x = 1
//│ Parsed:
//│ 	Let(Ident(x),IntLit(1),None)

let
  x = 1 in x
//│ Parsed:
//│ 	Let(Ident(x),IntLit(1),Some(Ident(x)))

let
  x = 1
  in x
//│ Parsed:
//│ 	Let(Ident(x),IntLit(1),Some(Ident(x)))

let x = 1
in x
//│ Parsed:
//│ 	Let(Ident(x),IntLit(1),Some(Ident(x)))

let x = 1
  in x
//│ Parsed:
//│ 	Let(Ident(x),IntLit(1),Some(Ident(x)))

:pe
let
  x = 1
in x
//│ ╔══[PARSE ERROR] Expected end of input; found newline instead
//│ ║  l.104: 	  x = 1
//│ ║         	       ^
//│ ║  l.105: 	in x
//│ ╙──       	
//│ Parsed:
//│ 	Let(Ident(x),IntLit(1),None)

:pe
let
x = 1
in x
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found newline instead
//│ ║  l.117: 	in x
//│ ╙──       	    ^
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.116: 	x = 1
//│ ╙──       	  ^
//│ Parsed:
//│ 	Error()
//│ 	Ident(x)

:pe
let
  with
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found 'with' keyword instead
//│ ║  l.130: 	  with
//│ ╙──       	  ^^^^
//│ Parsed:
//│ 	Error()


let x = 1 in
  x
//│ Parsed:
//│ 	Let(Ident(x),IntLit(1),Some(Ident(x)))

x => let x = 1 in x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Let(Ident(x),IntLit(1),Some(Ident(x))))

x => let x = 1 in
  x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Let(Ident(x),IntLit(1),Some(Ident(x))))

x => let x = 1
  in x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Let(Ident(x),IntLit(1),Some(Ident(x))))

x =>
  let x = 1
  in x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Block(List(Let(Ident(x),IntLit(1),Some(Ident(x))))))

x =>
  let x = 1
  x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Block(List(Let(Ident(x),IntLit(1),None), Ident(x))))

:pe
x => let x = 1
  x
//│ ╔══[PARSE ERROR] Unexpected identifier here
//│ ║  l.171: 	  x
//│ ╙──       	  ^
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Let(Ident(x),IntLit(1),None))


:pe
if
//│ ╔══[PARSE ERROR] Expected expression or indented block after `if` keyword; found end of input instead
//│ ║  l.180: 	if
//│ ╙──       	  ^
//│ Parsed:
//│ 	Error()






