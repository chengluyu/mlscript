:global
:parseOnly


+
//│ Parsed:
//│ 	Ident(+)

+1
//│ Parsed:
//│ 	App(Ident(+),Tup(List(IntLit(1))))

1 + 2
//│ Parsed:
//│ 	App(Ident(+),Tup(List(IntLit(1), IntLit(2))))

1 + +2
//│ Parsed:
//│ 	App(Ident(+),Tup(List(IntLit(1), App(Ident(+),Tup(List(IntLit(2)))))))

+1 + +2
//│ Parsed:
//│ 	App(Ident(+),Tup(List(App(Ident(+),Tup(List(IntLit(1)))), App(Ident(+),Tup(List(IntLit(2)))))))

+ + 1 + + + 2
//│ Parsed:
//│ 	App(Ident(+),Tup(List(App(Ident(+),Tup(List(App(Ident(+),Tup(List(IntLit(1))))))), App(Ident(+),Tup(List(App(Ident(+),Tup(List(IntLit(2))))))))))

1 + 2 * 3
//│ Parsed:
//│ 	App(Ident(+),Tup(List(IntLit(1), App(Ident(*),Tup(List(IntLit(2), IntLit(3)))))))

1 + 2 * 3 - 4
//│ Parsed:
//│ 	App(Ident(-),Tup(List(App(Ident(+),Tup(List(IntLit(1), App(Ident(*),Tup(List(IntLit(2), IntLit(3))))))), IntLit(4))))

1 => 2
//│ Parsed:
//│ 	InfixApp(Tup(List(IntLit(1))),keyword '=>',IntLit(2))

1 =>
  2
//│ Parsed:
//│ 	InfixApp(Tup(List(IntLit(1))),keyword '=>',Block(List(IntLit(2))))

x =>
  1
  2
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Block(List(IntLit(1), IntLit(2))))

x => x : t
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',InfixApp(Ident(x),keyword ':',Ident(t)))

x =>
  x : t
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Block(List(InfixApp(Ident(x),keyword ':',Ident(t)))))


1 +
 2
//│ Parsed:
//│ 	App(Ident(+),Tup(List(IntLit(1), Block(List(IntLit(2))))))


:pt
1 +
2 +
3
//│ Parsed tree:
//│ App:
//│   lhs = Ident of "+"
//│   rhs = Tup of Ls of 
//│     App:
//│       lhs = Ident of "+"
//│       rhs = Tup of Ls of 
//│         IntLit of 1
//│         IntLit of 2
//│     IntLit of 3

1 +
 let x = 2
 class A
 x
 42
//│ Parsed:
//│ 	App(Ident(+),Tup(List(IntLit(1), Block(List(Let(Ident(x),IntLit(2),None), TypeDef(Cls,None,Ident(A),None,None), Ident(x), IntLit(42))))))

:pe
1 +
 2,
 3
//│ ╔══[PARSE ERROR] Unexpected comma in this position
//│ ║  l.93: 	 2,
//│ ╙──      	  ^
//│ Parsed:
//│ 	App(Ident(+),Tup(List(IntLit(1), Block(List(IntLit(2), IntLit(3))))))


