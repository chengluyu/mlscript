:NewDefs

:AllowRuntimeErrors
fun foo() =
  let local(x) =
    class Foo {
      fun bar = x + foo()
    }
    (new Foo()).bar
  local(1)
foo()
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, N, Nil, L(Lam(Tup(), Blk(NuFunDef(Some(false), local, N, Nil, L(Lam(Tup((N, Var("x"))), Blk(NuTypeDef(Cls, TypeName("Foo"), Ls(), N, N, N, Ls(), N, N, TypingUnit(NuFunDef(None, bar, N, Nil, L(App(Var("+"), Tup((N, Var("x")), (N, App(Var("foo"), Tup())))))))), Sel(Bra(rcd = false, App(NuNew(Var("Foo")), Tup())), bar))))), App(Var("local"), Tup((N, IntLit(1)))))))), App(Var("foo"), Tup()))
//│ Lifted:
//│ TypingUnit {
//│   class Foo$1([x,]) {fun bar = () => +((this).x, foo$1(),)}
//│   let local$2 = (x,) => {('(' new Foo$1([x,]) {} ')').bar}
//│   fun foo$1 = () => {local$2(1,)}
//│   Code(List(foo$1()))
//│ }
//│ fun foo: () -> Int
//│ Int
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

fun foo(f) = 
  f(1)
foo(x => x+1)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, N, Nil, L(Lam(Tup((N, Var("f"))), Blk(App(Var("f"), Tup((N, IntLit(1)))))))), App(Var("foo"), Tup((N, Lam(Tup((N, Var("x"))), App(Var("+"), Tup((N, Var("x")), (N, IntLit(1)))))))))
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$2$1([]) {fun apply = (x,) => +(x, 1,)}
//│   fun foo$1 = (f,) => {f(1,)}
//│   Code(List(foo$1({new Lambda1$2$1([]) {}},)))
//│ }
//│ fun foo: forall 'a. (1 -> 'a) -> 'a
//│ Int
//│ res
//│     = 2

fun foo(x) = 
  let bar(f) = 
    f(x)
  bar(y => y+x)
foo(1)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, N, Nil, L(Lam(Tup((N, Var("x"))), Blk(NuFunDef(Some(false), bar, N, Nil, L(Lam(Tup((N, Var("f"))), Blk(App(Var("f"), Tup((N, Var("x")))))))), App(Var("bar"), Tup((N, Lam(Tup((N, Var("y"))), App(Var("+"), Tup((N, Var("y")), (N, Var("x")))))))))))), App(Var("foo"), Tup((N, IntLit(1)))))
//│ Lifted:
//│ TypingUnit {
//│   class Lambda1$3$1([x,]) {fun apply = (y,) => +(y, (this).x,)}
//│   let bar$2 = (f, x,) => {f(x,)}
//│   fun foo$1 = (x,) => {bar$2({new Lambda1$3$1([x,]) {}}, x,)}
//│   Code(List(foo$1(1,)))
//│ }
//│ fun foo: Int -> Int
//│ Int
//│ res
//│     = 2

fun foo(f) = 
    f(1)
class A(y: Int){
  fun bar(z) = y+z
}
fun app(a) = 
  foo(z => a.bar(z))
app(new A(1))
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, N, Nil, L(Lam(Tup((N, Var("f"))), Blk(App(Var("f"), Tup((N, IntLit(1)))))))), NuTypeDef(Cls, TypeName("A"), Ls(), S(Tup((S(Var("y")), Var("Int")))), N, N, Ls(), N, N, TypingUnit(NuFunDef(None, bar, N, Nil, L(Lam(Tup((N, Var("z"))), App(Var("+"), Tup((N, Var("y")), (N, Var("z"))))))))), NuFunDef(None, app, N, Nil, L(Lam(Tup((N, Var("a"))), Blk(App(Var("foo"), Tup((N, Lam(Tup((N, Var("z"))), App(Sel(Var("a"), bar), Tup((N, Var("z")))))))))))), App(Var("app"), Tup((N, App(NuNew(Var("A")), Tup((N, IntLit(1))))))))
//│ Lifted:
//│ TypingUnit {
//│   class A$1([y: Int,]) {fun bar = (z,) => +((this).y, z,)}
//│   class Lambda1$3$2([a,]) {fun apply = (z,) => ((this).a).bar(z,)}
//│   fun foo$2 = (f,) => {f(1,)}
//│   fun app$1 = (a,) => {foo$2({new Lambda1$3$2([a,]) {}},)}
//│   Code(List(app$1(new A$1([1,]) {},)))
//│ }
//│ fun foo: forall 'a. (1 -> 'a) -> 'a
//│ class A(y: Int) {
//│   fun bar: Int -> Int
//│ }
//│ fun app: forall 'b. {bar: 1 -> 'b} -> 'b
//│ Int
//│ res
//│     = 2
